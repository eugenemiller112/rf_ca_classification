# Greyscale image diff code
import cv2
import numpy as np
from PIL import Image, ImageChops, ImageStat
from statistics import median
import ntpath
import time
import tempfile
import shutil
import math
import glob
import random
import os, sys

print(cv2.__version__)

# Greyscale image diff code. Looks at images in read_dir for images matching names generated by frame_extraction and
# matching the frames specified (first_frame, last_frame). Then calculates the difference in greyscale pixel values
# and generates a new image to be saved in save_dir.

#### This is a copy of diff_imager as defined in image_preprocessing.py ####
def diff_imager(read_dir, save_dir):

    first_frame = 15
    last_frame = 60
    for subdir, subdirList, fileList in os.walk(read_dir):
            print(subdir)
            if subdir.endswith(".avi"):
                dirname = os.fsdecode(subdir)
                img1 = cv2.imread(subdir + '/frame%d.jpg' % first_frame)
                img2 = cv2.imread(subdir + '/frame%d.jpg' % last_frame)

            # diff has the required difference data
            # try converting these to doubles -- to increase resolution.

                diff = np.abs(img1.astype(np.uint) - img2.astype(np.uint)).astype(np.uint8)
                print(type(diff))

            # Convert from array and save as image
                img = Image.fromarray(diff)

                names = dirname.split("/")
                savename = names[-1]
                img.save("%s %s - diff(%d - %d).png" % ((save_dir + "/"), savename, first_frame, last_frame))
            else:
                continue

def frame_extraction(video_dir, save_dir, final_frame, greyscale = False):
    directory = os.fsencode(video_dir)    # video directory
    for file in os.listdir(directory):
        filename = os.fsdecode(file)
        fileloc = os.path.join(video_dir, filename)  # file location as string
        # filenoext = os.path.splitext(filename)[0]
        if filename.endswith(".avi"):  # all .avi videos
            vidcap = cv2.VideoCapture(fileloc)  # read video
            success, image = vidcap.read()
            count = 0
            success = True
            if not os.path.exists(os.path.join(save_dir, filename)):
                os.makedirs(os.path.join(save_dir, filename))
            while success and (count <= final_frame):  # every time a new image is detected
                framename = "frame%d.jpg" % (count)
                save = os.path.join(os.path.join(save_dir, filename), framename)
                print(save)

                if greyscale:
                    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

                cv2.imwrite(save, image)  # save frame as JPEG file
                success, image = vidcap.read()
                count += 1
                continue
        else:
            continue
diff_imager(read_dir,save_dir)